# Vector in R
MyFirstVector <- c(3, 45, 6, 89)
MyFirstVector
MyFirstVector <- c(3, 45, 6, 89)
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.integer(3)
is.integer(3L)
is.double(MyFirstVector)
v2 <- c(2L, 343L)
is.integer(v2)
is.double(v2)
v3
# Character vector
v3 <- c("a", 'b', "sds")
v3
")
v3
Character vector
v3 <- c("a", 'b', "sds", "45")
v3
# Character vector
rm(v3)
v3 <- c("a", 'b', "sds", "45")
v3
v3 <- c("a", "sds", "45")
)
v3
v3 <- c("a", "sds", "45", 0)
v3
seq(1,4)
seq(1:4)
a
a <- seq(1:4)
a
a <- seq(1,4)
a
a <- seq(1,4,0.5)
a
a <- seq(1:4,0.5)
a
a <- seq(1:4,0.3)
a
a <- seq(1,4,0.3)
a
b <- rep(3, 5)
b
c <- rep('a', 5)
c
d <- rep(v2, 3)
d
x <- c(1, 123, 45, 678)  # Combine
y <- seq(2,11,2)         # Seq generator
z <- rep("something", 3) # Replicates
w[-1]
w <- c("a", "b", "c", "d", "E")
w[-1]
w[2]
w[-3]
w[-1]
w[1:3]
w[3:4]
w[3:1]
w[-3]
w[0]
w[7]
w[1:3]
w[1:8]
?rnorm()
?c()
?seq()
?rep()
?print
?is
?is.environment
?typeof
?sqrt
?paste
?paste0
install.packages("ggplot")
install.packages("ggplot2")
# Activating packages
library("ggplot2")
?qplot
?ggplot
?diamonds
qpolt(data = diamonds, carat, price,
colour = clarity, facets=~clarity)
qpolt(data = diamonds, carat, price,
colour = clarity, facets=~clarity)
# Activating packages
library(ggplot2)
qpolt(data = diamonds, carat, price,
colour = clarity, facets=~clarity)
qplot(data = diamonds, carat, price,
colour = clarity, facets=~clarity)
qplot(data = diamonds, carat, price,
colour = clarity, facets=~clarity)
qplot(data = diamonds, carat, price,
colour = clarity, facets=.~clarity)
length(revenue)
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
length(revenue)
length(expenses)
?round
?mean
?mean
?min
?max
?round
# Todo
# # Profit for each month
profit = revenue - expenses
# Todo
# # Profit for each month
profit = revenue - expenses
# Todo
# # Profit for each month
profit = revenue - expenses
# Todo
# # Profit for each month
profit = revenue - expenses
4574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
# Todo
# # Profit for each month
profit = revenue - expenses
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
# Todo
# # Profit for each month
profit = revenue - expenses
# Todo
# # Profit for each month
profit <- revenue - expenses
## Profit after tax for each month
profit_after_tax <- profit * 0.7
## Profit margin for each month
profit_margin <- profit_after_tax/revenue
## Good months
good_months <- 0
#Dear Student,
#
#Welcome to the world of Basketball Data!
#I'm sure you will enjoy this section of the R Programming course.
#
#Instructions for this dataset:
# Simply select ALL the lines in this script by pressing
# CTRL+A on Windows or CMND+A on a Mac and execute them
# Once you have executed the commands the following objects
# will be created:
# Matrices:
# - FieldGoalAttempts
# - FieldGoals
# - Games
# - MinutesPlayed
# - Salary
# Vectors:
# - Players
# - Seasons
#We will go understand these inside the course.
#
#Sincerely,
#Kirill Eremenko
#www.superdatascience.com
#Copyright: These datasets were prepared using publicly available data.
#           However, theses scripts are subject to Copyright Laws.
#           If you wish to use these R scripts outside of the R Programming Course
#           by Kirill Eremenko, you may do so by referencing www.superdatascience.com in your work.
#Comments:
#Seasons are labeled based on the first year in the season
#E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Salaries
KobeBryant_Salary <- c(15946875,17718750,19490625,21262500,23034375,24806250,25244493,27849149,30453805,23500000)
JoeJohnson_Salary <- c(12000000,12744189,13488377,14232567,14976754,16324500,18038573,19752645,21466718,23180790)
LeBronJames_Salary <- c(4621800,5828090,13041250,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
CarmeloAnthony_Salary <- c(3713640,4694041,13041250,14410581,15779912,17149243,18518574,19450000,22407474,22458000)
DwightHoward_Salary <- c(4493160,4806720,6061274,13758000,15202590,16647180,18091770,19536360,20513178,21436271)
ChrisBosh_Salary <- c(3348000,4235220,12455000,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
ChrisPaul_Salary <- c(3144240,3380160,3615960,4574189,13520500,14940153,16359805,17779458,18668431,20068563)
KevinDurant_Salary <- c(0,0,4171200,4484040,4796880,6053663,15506632,16669630,17832627,18995624)
DerrickRose_Salary <- c(0,0,0,4822800,5184480,5546160,6993708,16402500,17632688,18862875)
DwayneWade_Salary <- c(3031920,3841443,13041250,14410581,15779912,14200000,15691000,17182000,18673000,15000000)
#Matrix
Salary <- rbind(KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary)
rm(KobeBryant_Salary, JoeJohnson_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, LeBronJames_Salary, ChrisPaul_Salary, DerrickRose_Salary, DwayneWade_Salary, KevinDurant_Salary)
colnames(Salary) <- Seasons
rownames(Salary) <- Players
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
#Minutes Played
KobeBryant_MP <- c(3277,3140,3192,2960,2835,2779,2232,3013,177,1207)
JoeJohnson_MP <- c(3340,2359,3343,3124,2886,2554,2127,2642,2575,2791)
LeBronJames_MP <- c(3361,3190,3027,3054,2966,3063,2326,2877,2902,2493)
CarmeloAnthony_MP <- c(2941,2486,2806,2277,2634,2751,1876,2482,2982,1428)
DwightHoward_MP <- c(3021,3023,3088,2821,2843,2935,2070,2722,2396,1223)
ChrisBosh_MP <- c(2751,2658,2425,2928,2526,2795,2007,2454,2531,1556)
ChrisPaul_MP <- c(2808,2353,3006,3002,1712,2880,2181,2335,2171,2857)
KevinDurant_MP <- c(1255,1255,2768,2885,3239,3038,2546,3119,3122,913)
DerrickRose_MP <- c(1168,1168,1168,3000,2871,3026,1375,0,311,1530)
DwayneWade_MP <- c(2892,1931,1954,3048,2792,2823,1625,2391,1775,1971)
#Matrix
MinutesPlayed <- rbind(KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP)
rm(KobeBryant_MP, JoeJohnson_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, LeBronJames_MP, ChrisPaul_MP, DerrickRose_MP, DwayneWade_MP, KevinDurant_MP)
colnames(MinutesPlayed) <- Seasons
rownames(MinutesPlayed) <- Players
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
salary
Salary
Salary
?matrix
?rbind
a <- rbind(1:4)
a
a <- rbind(1:4, 5:8)
a
a <- rbind(1:4, 5:8, (11,12,13,14))
a <- rbind(1:4, 5:8, c(11,12,13,14))
a
a[1,1]
a[,3]
b <- rbind(1:4, 5:8, c(11,12,13,14))
b
a <- rbind(c(1,2,3,4), c(5,6,7,8), c(11,12,13,14))
a
b <- rbind(c(1,2,3,4), c(5,6,7,8), c(11,12,13,14))
b
a == b
?cbind
?matrix
A <- matrix(1:20, nrow=5, ncol=4)
A
A[5,2]
typeofA[5,2]
typeof(A[5,2])
B <- matrix(1:20, nrow=5, ncol=4, byrow=T)
B
B[3,2]
C <- matrix(1:20, nrow=5, ncol=4, byrow=T, dimname=c("a","b"))
C
C <- matrix(1:20, nrow=5, ncol=4, byrow=T, dimname=1:2)
C <- matrix(1:20, nrow=5, ncol=4, byrow=T, dimname=[1:2])
C <- matrix(1:20, nrow=5, ncol=4, byrow=T, dimname=list("A","B"))
C <- matrix(1:20, nrow=10, ncol=2, byrow=T, dimname=list("A","B"))
?rbind
r1 <- c("I","am","happy")
r2 <- c("what","a","day")
r3 <- c(1,2,3)
C <- rbind(r1, r2, r3)
C
D <- cbind(r1, r2, r3)
D
C
names(r1)
A <- 1:5
typeof(A)
A
A <- c(1:5)
A
typeof(A)
A <- 1:5
A
typeof(A)
names(A)
names(A) <- c("z","y","x","w","v","u")
names(A) <- c("z","y","x","w","v")
A
temp.vector <- rep(c("a","b","zz"), 3)
temp.vector
temp.vector <- rep(c("a","b","zz"), each=3)
temp.vector
temp.vec <- rep(c("a","b","zz"), each=3)
temp.vec
temp.mat
temp.mat <- matrix(temp.vec, 3,3)
temp.mat
rnames(temp.mat)
rownames(temp.mat)
rownames(temp.mat) <- c("How", "Are","you")
colnames(temp.mat)
colnames(temp.mat) <- c("r","u","0")
temp.mat
?matplot
# Set working dir
getwd()
setwd("/Users/deegee/Desktop/WorkArea/GitHub/DataViz/taxation-rate")
getwd()
imported_data <- read.csv("result.csv")
imported_data
colnames(imported_data)
colnames(imported_data) <- c("taxableIncome","taxRate","taxAmount")
imported_data
summary(imported_data)
str(imported_data)
library(ggplot2)
plot <- ggplot(data = imported_data,
aes(x=taxableIncome, y=taxAmount)) + geom_line()
plot
plot  + geom_line()
plot <- ggplot(data = imported_data,
aes(x=taxableIncome, y=taxAmount, xlab="Tax to pay"))
plot  + geom_line()
plot <- ggplot(data = imported_data,
aes(x=taxableIncome, y=taxAmount))
str(imported_data)
plot  + geom_line() + geom_line(aes(x=taxableIncome, y=taxRate))
plot  + geom_line() + geom_line(aes(x=taxRate, y=taxRate))
plot  + geom_line(colour="DarkBlue") #+ geom_line(aes(x=taxRate, y=taxRate))
plot  + geom_line(colour="LightBlue") #+ geom_line(aes(x=taxRate, y=taxRate))
plot <- ggplot(data = imported_data,
aes(x=taxableIncome, y=taxableIncome))
plot  + geom_line(colour="LightBlue") #+ geom_line(aes(x=taxRate, y=taxRate))
ggplot(data = imported_data,
aes(x=taxableIncome, y=taxAmount))+ geom_line()
plot  + geom_line(colour="LightBlue")
ggplot(data = imported_data,
aes(x=taxableIncome, y=taxRate))+ geom_line()
+ geom_line(colour = "DarkRed")
ggplot(data = imported_data,
aes(x=taxableIncome, y=taxRate))
+ geom_line(colour = "DarkRed")
+ geom_line(colour="DarkRed")
ggplot(data = imported_data,
aes(x=taxableIncome, y=taxRate)) + geom_line(colour="DarkRed")
+ geom_line(aes(x=taxableIncome, y=taxRate))
plot  + geom_line(colour="LightBlue") + geom_line(aes(x=taxableIncome, y=taxRate))
plot  + geom_line(colour="LightBlue") + geom_line(aes(x=taxableIncome, y=taxRate))
